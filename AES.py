
Sbox = [[0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76],
        [0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0],
        [0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15],
        [0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75],
        [0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84],
        [0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf],
        [0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8],
        [0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2],
        [0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73],
        [0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb],
        [0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79],
        [0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08],
        [0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a],
        [0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e],
        [0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf],
        [0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16]]

Rcon = [[0x01, 0x00, 0x00, 0x00],
        [0x02, 0x00, 0x00, 0x00],
        [0x04, 0x00, 0x00, 0x00],
        [0x08, 0x00, 0x00, 0x00],
        [0x10, 0x00, 0x00, 0x00],
        [0x20, 0x00, 0x00, 0x00],
        [0x40, 0x00, 0x00, 0x00],
        [0x80, 0x00, 0x00, 0x00],
        [0x1b, 0x00, 0x00, 0x00],
        [0x36, 0x00, 0x00, 0x00]]

Sbox_inv = [[0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb],
           [0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb],
           [0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e],
           [0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25],
           [0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92],
           [0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84],
           [0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06],
           [0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b],
           [0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73],
           [0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e],
           [0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b],
           [0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4],
           [0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f],
           [0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef],
           [0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61],
           [0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d]]

default_matrix = [[0x02, 0x03, 0x01, 0x01],
                  [0x01, 0x02, 0x03, 0x01],
                  [0x01, 0x01, 0x02, 0x03],
                  [0x03, 0x01, 0x01, 0x02]]

# SubBytes
def subB(state):
    value = [[0 for x in range(4)] for y in range(4)]
    for x in range(4):
        for y in range(4):
            value[x][y] = Sbox[int(state[x][y] & 0xf0) >> 4][int(state[x][y] & 0x0f)]
    return value

# SubBytes Inverse
def subB_inv(state):
    value = [[0 for x in range(4)] for y in range(4)]
    for x in range(4):
        for y in range(4):
            value[x][y] = Sbox_inv[int(state[x][y] & 0xf0) >> 4][int(state[x][y] & 0x0f)]
    return value

# Shift Row
def shiftRow(state):
    value = [[0 for x in range(4)] for y in range(4)]
    for i in range(4):
        value[0][i] = state[0][i]
        value[1][i] = state[1][(i + 1) % 4]
        value[2][i] = state[2][(i + 2) % 4]
        value[3][i] = state[3][(i + 3) % 4]
    return value

# Shift Row Inverse
def shiftRow_inv(state):
    value = [[0 for x in range(4)] for y in range(4)]
    for i in range(4):
        value[0][i] = state[0][i]
        value[1][i] = state[1][(i + 3) % 4]
        value[2][i] = state[2][(i + 2) % 4]
        value[3][i] = state[3][(i + 1) % 4]
    return value

# Mix Columns
def mixCol(state):
    value = [[0 for x in range(4)] for y in range(4)]
    temp = [0 for x in range(4)]
    for i in range(4):
        for j in range(4):
            temp[j] = state[j][i]
        for z in range(4):
            value[z][i] = GF(temp, default_matrix[z])
    return value

def GF(col, row):
    result = [0 for x in range(4)]
    for a in range(4):
        item = row[a]
        if (col[a] & 0x80 == 0x80):
            con = True
        else:
            con = False
        if item == 0x01:
            result[a] = col[a]
        elif item == 0x02:
            if con:
                result[a] = ((col[a] << 1) % 0x100) ^ 0x1b
            else:
                result[a] = (col[a] << 1) % 0x100
        elif item == 0x03:
            temp = col[a]
            if con:
                result[a] = temp ^ 0x1b ^ ((col[a] << 1) % 0x100)
            else:
                result[a] = temp ^ ((col[a] << 1) % 0x100)
    return result[0] ^ result[1] ^ result[2] ^ result[3]

# Mix Columns inververse
def mixCol_inv(state):
    return mixCol(mixCol(mixCol(state)))

# Add Round Key
def addRoundK(state, key):
    value = [[0 for x in range(4)] for y in range(4)]
    for i in range(4):
        for j in range(4):
            value[i][j] = state[i][j] ^ key[i][j]
    return value

# Key Schedule
def keySchedule(table, roundNumber):
    value = [[0 for x in range(4)] for y in range(4)]
    word = [0 for x in range(4)]
    word[0] = Sbox[int((table[1][(roundNumber + 1) * 4 - 1] & 0xf0) >> 4) % 0x100][
        int((table[1][(roundNumber + 1) * 4 - 1] & 0x0f)) % 0x100]
    word[1] = Sbox[int((table[2][(roundNumber + 1) * 4 - 1] & 0xf0) >> 4) % 0x100][
        int((table[2][(roundNumber + 1) * 4 - 1] & 0x0f)) % 0x100]
    word[2] = Sbox[int((table[3][(roundNumber + 1) * 4 - 1] & 0xf0) >> 4) % 0x100][
        int((table[3][(roundNumber + 1) * 4 - 1] & 0x0f)) % 0x100]
    word[3] = Sbox[int((table[0][(roundNumber + 1) * 4 - 1] & 0xf0) >> 4) % 0x100][
        int((table[0][(roundNumber + 1) * 4 - 1] & 0x0f)) % 0x100]
    for i in range(4):
        for j in range(4):
            if i == 0:
                table[j][(roundNumber + 1) * 4 + i] = (table[j][roundNumber * 4 + i] ^ word[j] ^ Rcon[roundNumber][j]) % 0x100
            else:
                table[j][(roundNumber + 1) * 4 + i] = table[j][roundNumber * 4 + i] ^ table[j][(roundNumber + 1) * 4 + i - 1]
    for i in range(4):
        for j in range(4):
            value[i][j] = table[i][(roundNumber + 1) * 4 + j]
    return value

def Encrypt(state, cKey):
    # Alt anahtarların tutulduğu tablo
    keySTable = [[0 for x in range(44)] for y in range(4)]
    for i in range(4):
        for j in range(4):
            keySTable[i][j] = cKey[i][j] #cipher key
    # Ilk round değeri
    value_addRoundkey = addRoundK(state, cKey)
    # 9 round
    for c in range(9):
        value_subBytes = subB(value_addRoundkey)
        value_shiftRows = shiftRow(value_subBytes)
        value_mixColumns = mixCol(value_shiftRows)
        value_addRoundkey = addRoundK(value_mixColumns, keySchedule(keySTable, c))
    value_subBytes = subB(value_addRoundkey)
    value_shiftRows = shiftRow(value_subBytes)
    value_addRoundkey = addRoundK(value_shiftRows, keySchedule(keySTable, 9))
    return value_addRoundkey

def Decrypt(state, cKey):
    # Alt anahtarların tutulduğu tablo
    keySTable = [[0 for x in range(44)] for y in range(4)]
    # Tablodaki ilk blok cipher keydir.
    for i in range(4):
        for j in range(4):
            keySTable[i][j] = cKey[i][j]
    for f in range(10):
        keySchedule(keySTable, f)
    value_addRoundkey = addRoundK(state, parser(keySTable, 10))
    value_shiftRows = shiftRow_inv(value_addRoundkey)
    value_subBytes = subB_inv(value_shiftRows)
    for c in range(9, 0, -1):
        value_addRoundkey = addRoundK(value_subBytes, parser(keySTable, c))
        value_mixColumns = mixCol_inv(value_addRoundkey)
        value_shiftRows = shiftRow_inv(value_mixColumns)
        value_subBytes = subB_inv(value_shiftRows)
    value_addRoundkey = addRoundK(value_subBytes, parser(keySTable, 0))
    return value_addRoundkey

# Helper
def parser(table, blockNo):
    value = [[0 for x in range(4)] for y in range(4)]
    for i in range(4):
        for j in range(4):
            value[i][j] = table[i][(blockNo) * 4 + j]
    return value

if __name__ == "__main__":
    data = [[0x19, 0x3d, 0xe3, 0xb3],
            [0xa0, 0xf4, 0xe2, 0x2b],
            [0x9a, 0xc6, 0x8d, 0x2a],
            [0xe9, 0xf8, 0x48, 0x08]]

    key = [[0xbb, 0xaa, 0xab, 0x09],
           [0xa2, 0xae, 0xf7, 0xbb],
           [0x99, 0xff, 0x15, 0x3b],
           [0xee, 0xa6, 0x88, 0x3c]]
    print("--------------------------------- DATA ----------------------------------------------")
    print(data)
    print("\n------------------------------- ENCRYPTION ------------------------------------------")
    print(Encrypt(data, key))
    print("\n------------------------------- DECRYPTION -------------------------------------------")
    print(Decrypt(Encrypt(data, key), key))
    print("\n--------------------------------------------------------------------------------------")